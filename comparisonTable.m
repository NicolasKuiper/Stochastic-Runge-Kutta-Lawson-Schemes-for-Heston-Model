% Function: comparissonTable.m
%
%
% Purpose: Generate comparisson table for accuracy and efficiency 
%          analysis     
%
% Algorithm: Nicolas Kuiper & Martin Westberg
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
function [option_prices1,arithmetic_prices,...
    geometric_prices,methods] = comparisonTable(S0,r,V0,K,K_cv,...
    T,type,kappa,theta,sigma,rho,Nt,Nsim,R)
%% European Option values

% Monte Carlo prices, std. dev. and time 
[~, MC_price, MC_std, MC_time] = European_Heston_MC(S0,r,V0,K,type,...
    kappa,theta,sigma,rho,Nt,Nsim,T,R);
[~, MC_AV_price, MC_AV_std, MC_AV_time] = European_Heston_MC_AV(S0,r,...
    V0,K,type,kappa,theta,sigma,rho,Nt,Nsim,T,R);
[~, MC_CV_price, MC_CV_std, MC_CV_time] = European_Heston_MC_CV(S0,r,...
    V0,K,K_cv,type,kappa,theta,sigma,rho,Nt,Nsim,T,R);

% Midpoint prices, std. dev. and time 
[~, Mid_price, Mid_std, ...
    Mid_time] = European_Heston_Midpoint_FSL(S0,r,V0,K,T,type,...
    kappa,theta,sigma,rho,Nt,Nsim,R);
[~, Mid_AV_price, Mid_AV_std,...
    Mid_AV_time] = European_Heston_Midpoint_FSL_AV(S0,r,V0,K,T,...
    type,kappa,theta,sigma,rho,Nt,Nsim,R);
[~, Mid_CV_price, Mid_CV_std, ...
    Mid_CV_time] = European_Heston_Midpoint_FSL_CV(S0,r,V0,K,...
    K_cv,T,type,kappa,theta,sigma,rho,Nt,Nsim,R);

% Euler prices, std. dev. and time 
[~, Euler_price, Euler_std, ...
    Euler_time] = European_Heston_Euler_DSL(S0,r,V0,K,T,type,kappa,...
    theta,sigma,rho,Nt,Nsim,R);
[~, Euler_AV_price, Euler_AV_std,...
    Euler_AV_time] = European_Heston_Euler_DSL_AV(S0,r,V0,K,T,type,...
    kappa,theta,sigma,rho,Nt,Nsim,R);
[~, Euler_CV_price, Euler_CV_std, ...
    Euler_CV_time] = European_Heston_Euler_DSL_CV(S0,r,V0,K,K_cv,T,...
    type,kappa,theta,sigma,rho,Nt,Nsim,R);

% Black-Scholes price
[~, BS_price] = BS_option_price(S0,K,sigma,r,T,type);

% Create an Error Comparison Table for European Options
methods = {'Standard Monte Carlo', 'Antithetic Monte Carlo', ...
    'Control Monte Carlo', 'Midpoint', 'Antithetic Midpoint', ...
    'Control Midpoint','Euler', 'Antithetic Euler', 'Control Euler',...
    'Black-Scholes (benchmark)'};

% European prices
option_prices1 = [MC_price, MC_AV_price,MC_CV_price,Mid_price,...
    Mid_AV_price,Mid_CV_price,Euler_price,Euler_AV_price,...
    Euler_CV_price,BS_price];

% European std. errors
std_errors = [MC_std, MC_AV_std,MC_CV_std,Mid_std,...
    Mid_AV_std,Mid_CV_std,Euler_std,Euler_AV_std,...
    Euler_CV_std,0];
std_errors = std_errors./sqrt(Nsim);

% European times
elapsed_times = [MC_time, MC_AV_time,MC_CV_time,Mid_time,...
    Mid_AV_time,Mid_CV_time,Euler_time,Euler_AV_time,...
    Euler_CV_time,0];

% European efficiencies
efficiency = std_errors.^2.*elapsed_times;

% European abs. errors
abs_errors = 100*abs((option_prices1 - BS_price))./BS_price;

% Generate table for visualization
comparison_table = table(methods', option_prices1', std_errors', ...
    elapsed_times',efficiency',abs_errors','VariableNames', ...
    {'Method', 'European Call Option Price', 'Standard Error', ...
    'Elapsed Time','Efficiency','Absolute Error'});
disp(comparison_table);

%% Asian Option values

% Monte Carlo prices, std. dev. and time
[~, MC_price, GMC_price,MC_std,GMC_std ,MC_time] = Asian_Heston_MC(S0,...
    r, V0, K, type, kappa, theta, sigma, rho, Nt, Nsim, T, R);
[~, MC_AV_price, GMC_AV_price, MC_AV_std,GMC_AV_std,...
    MC_AV_time] = Asian_Heston_MC_AV(S0, r, V0, K, type, kappa, theta,...
    sigma, rho, Nt, Nsim, T, R);
[~, MC_CV_price, GMC_CV_price,MC_CV_std,GMC_CV_std ,...
    MC_CV_time] = Asian_Heston_MC_CV(S0, r, V0, K, type, kappa, theta,...
    sigma, rho, Nt, Nsim, T, R);

% Midpoint prices, std. dev. and time 
[~, Mid_price, GMidpoint_price,Mid_std,GMidpoint_std,...
    Mid_time] = Asian_Heston_Midpoint_FSL(S0,r,V0,K,T,type,kappa,...
    theta,sigma,rho,Nt,Nsim,R);
[~, Mid_AV_price,GMid_AV_price, Mid_AV_std,GMid_AV_std,...
    Mid_AV_time] = Asian_Heston_Midpoint_FSL_AV(S0,r,V0,K,T,type,...
    kappa,theta,sigma,rho,Nt,Nsim,R);
[~, Mid_CV_price,GMid_CV_price, Mid_CV_std,GMid_CV_std,...
    Mid_CV_time] = Asian_Heston_Midpoint_FSL_CV(S0,r,V0,K,T,type,...
    kappa,theta,sigma,rho,Nt,Nsim,R);

% Euler prices, std. dev. and time 
[~, Euler_price,GEuler_price, Euler_std,GEuler_std, ...
    Euler_time] = Asian_Heston_Euler_DSL(S0,r,V0,K,T,type,kappa,...
    theta,sigma,rho,Nt,Nsim,R);
[~, Euler_AV_price, GEuler_AV_price,Euler_AV_std,GEuler_AV_std, ...
    Euler_AV_time] = Asian_Heston_Euler_DSL_AV(S0,r,V0,K,T,type,kappa,...
    theta,sigma,rho,Nt,Nsim,R);
[~, Euler_CV_price,GEuler_CV_price, Euler_CV_std,GEuler_CV_std, ...
    Euler_CV_time] = Asian_Heston_Euler_DSL_CV(S0,r,V0,K,T,type,kappa,...
    theta,sigma,rho,Nt,Nsim,R);

% Create an Error Comparison Table for European Options
methods = {'Standard Monte Carlo', 'Antithetic Monte Carlo',...
    'Control Monte Carlo', 'Midpoint','Antithetic Midpoint',...
    'Control Midpoint','Euler', 'Antithetic Euler', 'Control Euler'};

% Asian prices
arithmetic_prices = [MC_price, MC_AV_price,MC_CV_price,...
    Mid_price,Mid_AV_price,Mid_CV_price,...
    Euler_price,Euler_AV_price,Euler_CV_price];
geometric_prices = [GMC_price,GMC_AV_price,GMC_CV_price,...
    GMidpoint_price,GMid_AV_price,GMid_CV_price,GEuler_price,...
    GEuler_AV_price,GEuler_CV_price];

% Asian std. errors
std_errors = [MC_std, MC_AV_std,MC_CV_std,Mid_std,Mid_AV_std,...
    Mid_CV_std,Euler_std,Euler_AV_std,Euler_CV_std];
std_errors = std_errors./sqrt(Nsim);

geometric_std_errors =[GMC_std,GMC_AV_std,GMC_CV_std,GMidpoint_std,...
    GMid_AV_std,GMid_CV_std,GEuler_std,GEuler_AV_std,GEuler_CV_std];
geometric_std_errors = geometric_std_errors./sqrt(Nsim);

% Asian times
elapsed_times = [MC_time, MC_AV_time,MC_CV_time,Mid_time,...
    Mid_AV_time,Mid_CV_time,Euler_time,Euler_AV_time,Euler_CV_time];

% Asian efficiencies
asian_efficiency = std_errors.^2.*elapsed_times;
asian_geometric_efficiency = geometric_std_errors.^2.*elapsed_times;

% Asian abs. errors
arithmetic_abs_error = 100*abs(arithmetic_prices-MC_price)./MC_price;
geometric_abs_error = 100*abs(geometric_prices-GMC_price)./GMC_price;

% Generate table for visualization
comparison_table = table(methods',elapsed_times', arithmetic_prices', ...
    std_errors',asian_efficiency',arithmetic_abs_error', ...
    geometric_prices',geometric_std_errors',...
    asian_geometric_efficiency',geometric_abs_error',...
    'VariableNames', {'Method','Elapsed Time', ...
    'Arithmetic Asian Call Option Price', ...
    'Arithmetic Standard Error','Arithmetic Efficiency',...
    'Arithmetic Abs. Err.', 'Geometric Asian Call Option Price',...
    'Geometric Standard Error','Geometric Efficiency',...
    'Geometric Abs. Err.'});
disp(comparison_table);

end